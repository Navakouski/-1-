// В проекте используются библиотеки sql - работа с базами. https://hub.oscript.io/package/sql. Тут можно скачать Внешнюю компоненту или (https://system.data.sqlite.org/index.html/doc/trunk/www/downloads.wiki)

#Использовать asserts
#Использовать sql
#Использовать Tlog
#Использовать tmail

Перем ТекстыКолонокЗаполненияТаблицыЗаписиДанных;
Перем ПредставленияПриложения, ПредставленияСобытия, СоответствиеТаблиц;
Перем Логирование;
Перем ПутьПапкаЛога;
Перем ИмяФайлаЛога;

#Область ПрограммныйИнтерфейс

Процедура НачатьОбработку(ОбработкаЖурнала) Экспорт
				
	ПодготовитьВыводЛога(ОбработкаЖурнала);		

	НастройкиПочты = ОбработкаЖурнала.ПолучитьНастройкиПочты();

	Попытка
		ЗапуститьОбработку(ОбработкаЖурнала, НастройкиПочты);
	Исключение
		
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если НЕ Логирование.ЗаписатьСтрокуЛога(ТекстСообщения) Тогда
			Сообщить("ЗаписатьСтрокуЛога: " + Логирование.ТекстОшибки);
		КонецЕсли;
		
		Если НастройкиПочты.ОтправлятьПисьмоПриОшибке Тогда
			ОтправитьПисьмо(ОбработкаЖурнала, ТекстСообщения, ИмяФайлаЛога);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗапуститьОбработку(ОбработкаЖурнала, НастройкиПочты)
	
	ЧитатьЖурнал = ОбработкаЖурнала.ПолучитьЧитатьЖурнал();
	
	Если НастройкиПочты.ОтправитьТестовоеПисьмо Тогда
		ОтправитьТестовоеПисьмо(ОбработкаЖурнала);
	КонецЕсли;
	
	Если ЧитатьЖурнал Тогда
		
		ПодключитьсяКSQLLite(ОбработкаЖурнала);
		ПодключитьсяКMsSql(ОбработкаЖурнала);
		УстановитьИнформационнуюСистему(ОбработкаЖурнала);
		УстановитьТекстыКолонокЗаполненияТаблицыЗаписиДанных();
		ОбрабатыватьНовыеДанные(ОбработкаЖурнала);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьТестовоеПисьмо(ОбработкаЖурнала)
	
	ТекстПисьма = "Тестовое письмо";
	ОтправитьПисьмо(ОбработкаЖурнала, ТекстПисьма);
	
КонецПроцедуры

Процедура ОтправитьПисьмо(ОбработкаЖурнала, ТекстПисьма, ИмяФайлаЛога = "")
	
	НастройкиПочты = ОбработкаЖурнала.ПолучитьНастройкиПочты();
	
	УправлениеЭП = Новый ТУправлениеЭлектроннойПочтой();
	
	УчетнаяЗаписьЭП = УправлениеЭП.УчетнаяЗаписьЭП;
	
	ЗаполнитьЗначенияСвойств(УчетнаяЗаписьЭП, НастройкиПочты);
	
	СтруктураСообщения = УправлениеЭП.СтруктураСообщения;
	СтруктураСообщения.АдресЭлектроннойПочтыПолучателя = НастройкиПочты.АдресЭлектроннойПочтыПолучателя;
	
	Если ЗначениеЗаполнено(ИмяФайлаЛога) Тогда
		СтруктураСообщения.Вложения = ИмяФайлаЛога;
	КонецЕсли;
	
	СтруктураСообщения.АдресЭлектроннойПочтыОтправителя = УправлениеЭП.УчетнаяЗаписьЭП.ПользовательSMTP;
	СтруктураСообщения.ТемаСообщения = "Чтение журнала регистрации";
	СтруктураСообщения.ТипТекстаПочтовогоСообщения = "HTML";
	
	УправлениеЭП.НачатьТекстСообщенияHTML();
	УправлениеЭП.ДобавитьВТекстСообщенияHTML(ТекстПисьма);
	УправлениеЭП.ЗавершитьТекстСообщенияHTML();
	
	Если УправлениеЭП.ОтправитьСообщение() Тогда
		
		ТекстСообщения = "ОтправитьСообщение: УСПЕШНО";
		Если НЕ Логирование.ЗаписатьСтрокуЛога(ТекстСообщения) Тогда
			Сообщить("ЗаписатьСтрокуЛога: " + Логирование.ТекстОшибки);
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = "ОтправитьСообщение: " + УправлениеЭП.ТекстОшибки;
		Если НЕ Логирование.ЗаписатьСтрокуЛога(ТекстСообщения) Тогда
			Сообщить("ЗаписатьСтрокуЛога: " + Логирование.ТекстОшибки);
		КонецЕсли;
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьСобытия(ОбработкаЖурнала)
	
	ВыводитьЛог = ОбработкаЖурнала.ПолучитьВыводитьЛог();
	ТаблицаПоследнихIDSqlLite = ТаблицаПоследнихIDSqlLite(ОбработкаЖурнала);
	ТаблицаПоследнихIDSql = ТаблицаПоследнихIDSql(ОбработкаЖурнала);
	
	ЧислоСтрокДляЗаписи = ОбработкаЖурнала.ПолучитьЧислоСтрокДляЗаписи();
	НачатьСПервойВSQLLite = ОбработкаЖурнала.ПолучитьНачатьСПервойВSQLLite();
	
	Если НачатьСПервойВSQLLite Тогда
		ОбрабатываемаяСтрокаСобытий = ПерваяВSQLLite(ОбработкаЖурнала);
		ОбработкаЖурнала.УстановитьОбрабатываемаяСтрокаСобытий(ОбрабатываемаяСтрокаСобытий);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТаблицаПоследнихIDSqlLite Цикл
		
		ИмяТаблицыSQLLite = ТекСтрока.name;
		
		СоответствиеВSQL = СоответствиеТаблиц.Получить(ИмяТаблицыSQLLite);
		
		Если СоответствиеВSQL = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицыSQL = СоответствиеВSQL.ИмяТаблицы;
		
		ПараметрыПоиска = Новый Структура("Наименование", ИмяТаблицыSQL);
		ПодходящиеСтроки = ТаблицаПоследнихIDSql.НайтиСтроки(ПараметрыПоиска);
		
		ТекстСообщения = СтрШаблон("Не найдена строка %1  в таблице sql МаксималныеIDТаблиц", ИмяТаблицыSQL);
		Ожидаем.Что(ПодходящиеСтроки.Количество(), ТекстСообщения).Равно(1);
		
		IDпоследнейЗаписиВSQL = ПодходящиеСтроки[0].Id;
		
		ОбрабатываемаяСтрокаСобытий = ОбработкаЖурнала.ПолучитьОбрабатываемаяСтрокаСобытий();
		Если ИмяТаблицыSQL = "ЗаписиДанных" И ЗначениеЗаполнено(ОбрабатываемаяСтрокаСобытий) Тогда
			IDпоследнейЗаписиВSQL = ОбрабатываемаяСтрокаСобытий;
			ПроверятьНаРанееЗаписанные = Истина;
		Иначе
			ПроверятьНаРанееЗаписанные = Ложь;
		КонецЕсли;
		
		IDпоследнейЗаписиВSQLLite = ТекСтрока.seq;
		
		КоличествоНовыхЗаписей = IDпоследнейЗаписиВSQLLite - IDпоследнейЗаписиВSQL;
		
		Если КоличествоНовыхЗаписей <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыводитьЛог Тогда
			ТекстСообщения = СтрШаблон("Начата обработка таблицы %1. Обрабатываются записи с %2 по %3. КоличествоНовыхЗаписей %4", ИмяТаблицыSQL, IDпоследнейЗаписиВSQL, IDпоследнейЗаписиВSQLLite, КоличествоНовыхЗаписей);
			Если НЕ Логирование.ЗаписатьСтрокуЛога(ТекстСообщения) Тогда
				Сообщить("ЗаписатьСтрокуЛога: " + Логирование.ТекстОшибки);
			КонецЕсли;
			ЗамерОбщий = ТекущаяДата();
		КонецЕсли;
		
		ВсегоОбработано = 0;
		ЗамерПорции = ТекущаяДата();
		КоличествоПорцииЛога = 150000;
		
		Логирование.УвеличитьУровень();
		
		Пока КоличествоНовыхЗаписей > 0 Цикл
			
			Если КоличествоНовыхЗаписей > ЧислоСтрокДляЗаписи Тогда
				КоличествоНовыхЗаписей = ЧислоСтрокДляЗаписи;
			КонецЕсли;
			
			ВсегоОбработано = ВсегоОбработано + КоличествоНовыхЗаписей;
			
			IDпоследнейПолучаемойЗаписиВSQLLite = IDпоследнейЗаписиВSQL + ЧислоСтрокДляЗаписи;
			
			// Нужно для правильного сохранения последней прочитанной строки
			Если ИмяТаблицыSQL = "ЗаписиДанных" И ЗначениеЗаполнено(ОбрабатываемаяСтрокаСобытий) Тогда
				IDпоследнейПолучаемойЗаписиВSQLLite = IDпоследнейЗаписиВSQL + КоличествоНовыхЗаписей;
			КонецЕсли;
			
			ТЗВсеЗаписиКоторыхНеХватает = ТЗВсеЗаписиКоторыхНеХватает(ОбработкаЖурнала, IDпоследнейЗаписиВSQL, ИмяТаблицыSQLLite, СоответствиеВSQL.ИмяКолонкиАйди, IDпоследнейПолучаемойЗаписиВSQLLite);
			
			Если ТЗВсеЗаписиКоторыхНеХватает.Количество() = 0 Тогда
				IDпоследнейЗаписиВSQL = IDпоследнейПолучаемойЗаписиВSQLLite;
				КоличествоНовыхЗаписей = IDпоследнейЗаписиВSQLLite - IDпоследнейЗаписиВSQL;
				Продолжить;
			КонецЕсли;
			
			ПостОбработкаТЗВсеЗаписиКоторыхНеХватает(ТЗВсеЗаписиКоторыхНеХватает, ИмяТаблицыSQL);
			
			ЗначенияДляЗаписи = ТаблицуЗначенийВМассив(ТЗВсеЗаписиКоторыхНеХватает, ОбработкаЖурнала);
			ТекстЗапросаСозданияВSQL = ТекстЗапросаСозданияВSQL(ОбработкаЖурнала, ЗначенияДляЗаписи, СоответствиеВSQL, ПроверятьНаРанееЗаписанные);
			
			IDпоследнейЗаписиВSQL = IDпоследнейПолучаемойЗаписиВSQLLite;
			КоличествоНовыхЗаписей = IDпоследнейЗаписиВSQLLite - IDпоследнейЗаписиВSQL;
			
			Если ТекстЗапросаСозданияВSQL = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьЗаписиВSQL(ТекстЗапросаСозданияВSQL, ОбработкаЖурнала);
			
			Если ВыводитьЛог И ВсегоОбработано % КоличествоПорцииЛога = 0 Тогда
				
				ВремяЗамераПорцииОбщий = ЗакончитьЗамер(ЗамерОбщий);
				ВремяЗамераПорции = ЗакончитьЗамер(ЗамерПорции);
				ТекстСообщения = СтрШаблон("Всего обработано %1 записей за %2. Обработано %3 записей за %4", ВсегоОбработано, ВремяЗамераПорцииОбщий, КоличествоПорцииЛога, ВремяЗамераПорции);
				Если НЕ Логирование.ЗаписатьСтрокуЛога(ТекстСообщения) Тогда
					Сообщить("ЗаписатьСтрокуЛога: " + Логирование.ТекстОшибки);
				КонецЕсли;
				ЗамерПорции = ТекущаяДата();
				
			КонецЕсли;
			
		КонецЦикла;
		
		Логирование.УменьшитьУровень();
		
		Если ВыводитьЛог Тогда
			ВремяЗамера = ЗакончитьЗамер(ЗамерОбщий);
			ТекстСообщения = СтрШаблон("Всего обработано %1 записей за %2", ВсегоОбработано, ВремяЗамера);
			Если НЕ Логирование.ЗаписатьСтрокуЛога(ТекстСообщения) Тогда
				Сообщить("ЗаписатьСтрокуЛога: " + Логирование.ТекстОшибки);
			КонецЕсли;
			Если НЕ Логирование.ЗаписатьСтрокуЛога("") Тогда
				Сообщить("ЗаписатьСтрокуЛога: " + Логирование.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяТаблицыSQL = "ЗаписиДанных" И ЗначениеЗаполнено(ОбрабатываемаяСтрокаСобытий) Тогда
			ОбработкаЖурнала.УстановитьОбрабатываемаяСтрокаСобытий(0);
			ОбработкаЖурнала.УстановитьНачатьСПервойВSQLLite(Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПостОбработкаТЗВсеЗаписиКоторыхНеХватает(ТЗВсеЗаписиКоторыхНеХватает, ИмяТаблицыSQL)
	
	Если ИмяТаблицыSQL = "Приложения" ИЛИ ИмяТаблицыSQL = "События" Тогда
		
		ТЗВсеЗаписиКоторыхНеХватает.Колонки.Добавить("Представление");
		
		Для Каждого ТекСтрока Из ТЗВсеЗаписиКоторыхНеХватает Цикл
			
			ПоискСтроки = СтрЗаменить(ТекСтрока.name, """", "");
			
			Если ИмяТаблицыSQL = "Приложения" Тогда
				ПредставлениеЭлемента = ПредставленияПриложения.Получить(ПоискСтроки);
			ИначеЕсли ИмяТаблицыSQL = "События" Тогда
				ПредставлениеЭлемента = ПредставленияСобытия.Получить(ПоискСтроки);
			КонецЕсли;
			
			Если ПредставлениеЭлемента = Неопределено Тогда
				ТекСтрока.Представление = ТекСтрока.name;
			Иначе
				ТекСтрока.Представление = ПредставлениеЭлемента;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяТаблицыSQL = "ЗаписиДанных" Тогда
		
		ТЗВсеЗаписиКоторыхНеХватает.Колонки.Добавить("Данные");
		ТЗВсеЗаписиКоторыхНеХватает.Колонки.Добавить("ИдентификаторДанных");
		
		Для Каждого ТекСтрока Из ТЗВсеЗаписиКоторыхНеХватает Цикл
			
			ТекСтрока.date = ДатаФорматаSQL(ТекСтрока.date);
			ТекСтрока.transactionDate = ДатаФорматаSQL(ТекСтрока.transactionDate);
			
			Если ЗначениеЗаполнено(ТекСтрока.data) Тогда
				
				Данные = ПерекодироватьСтроку(ТекСтрока.data);
				НомерРазделителя = СтрНайти(Данные, ":");
				ИдентификаторДанных = Сред(Данные, НомерРазделителя + 1);
				Если СтрДлина(ИдентификаторДанных) <> 32 Тогда
					ИдентификаторДанных = "";
				КонецЕсли;
				
				ТекСтрока.Данные = Данные;
				ТекСтрока.ИдентификаторДанных = ИдентификаторДанных;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТЗВсеЗаписиКоторыхНеХватает.Колонки.Удалить("data");
		ТЗВсеЗаписиКоторыхНеХватает.Колонки.Удалить("datatype");
		ТЗВсеЗаписиКоторыхНеХватает.Колонки.Удалить("sessionDataSplitCode");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗакончитьЗамер(Замер)
	
	КонВремя = ТекущаяДата();
	КонДни = 0;
	КонЧасы = 0;
	КонМинуты = 0;
	КонСекунды = 0;
	
	Если ПустаяСтрока(Замер) Тогда
		Возврат "Замер времени не начат!";
	КонецЕсли;
	
	ОстатокВремени = КонВремя - Замер;
	
	КонДни = Цел(ОстатокВремени / 86400); //++ 86400 - Количество секунд в сутках
	ОстатокВремени = ОстатокВремени - КонДни * 86400;
	
	КонЧасы = Цел(ОстатокВремени / 3600); //++ 3600 - Количество секунд в часе
	ОстатокВремени = ОстатокВремени - КонЧасы * 3600;
	
	КонМинуты = Цел(ОстатокВремени / 60); //++ 60 - Количество секунд в минуте
	ОстатокВремени = ОстатокВремени - КонМинуты * 60;
	
	КонСекунды = ОстатокВремени;
	ТекСтрока = Формат(КонДни, "ЧН=2; ЧН=0; ЧВН=") + "/" + Формат(КонЧасы, "ЧЦ=2; ЧН=0; ЧВН=") + ":"
		+ Формат(КонМинуты, "ЧЦ=2; ЧН=0; ЧВН=") + ":" + Формат(КонСекунды, "ЧЦ=2; ЧН=0; ЧВН=");
	
	Возврат ТекСтрока;
	
КонецФункции

Функция ТаблицаПоследнихIDSqlLite(ОбработкаЖурнала)
	
	СоединениеSqlLite = ОбработкаЖурнала.ПолучитьСоединениеSqlLite();
	
	ЗапросВставка = Новый Запрос();
	ЗапросВставка.УстановитьСоединение(СоединениеSqlLite);
	ЗапросВставка.Текст = "Select * From sqlite_sequence";
	Рез = ЗапросВставка.Выполнить();
	
	Ожидаем.Что(Рез.Пустой()).Равно(Ложь);
	
	ТЗ = Рез.Выгрузить();
	
	Ожидаем.Что(ТЗ.Количество() = 0).Равно(Ложь);
	
	СоединениеSqlLite.Закрыть();
	СоединениеSqlLite.Открыть();
	
	Возврат ТЗ;
	
КонецФункции

Функция ТаблицаПоследнихIDSql(ОбработкаЖурнала)
	
	ИнформационнаяСистема = ОбработкаЖурнала.ПолучитьИнформационнаяСистема();
	СоединениеSql = ОбработкаЖурнала.ПолучитьСоединениеSql();
	ЗапросSQL = Новый Запрос();
	ЗапросSQL.УстановитьСоединение(СоединениеSql);
	ЗапросSQL.Текст = "Select * From МаксималныеIDТаблиц where ИнформационнаяСистема = @ИнформационнаяСистема";
	ЗапросSQL.УстановитьПараметр("ИнформационнаяСистема", ИнформационнаяСистема);
	РезSql = ЗапросSQL.Выполнить();
	
	Ожидаем.Что(РезSql.Пустой()).Равно(Ложь);
	
	ТЗ = РезSql.Выгрузить();
	
	Ожидаем.Что(ТЗ.Количество() = 0).Равно(Ложь);
	
	СоединениеSql.Закрыть();
	СоединениеSql.Открыть();
	
	Возврат ТЗ;
	
КонецФункции

Функция ПерваяВSQLLite(ОбработкаЖурнала)
	
	СоединениеSqlLite = ОбработкаЖурнала.ПолучитьСоединениеSqlLite();
	
	ЗапросВставка = Новый Запрос();
	ЗапросВставка.УстановитьСоединение(СоединениеSqlLite);
	ЗапросВставка.Текст = "Select rowID From EventLog ORDER BY rowID ASC LIMIT 1";
	Рез = ЗапросВставка.Выполнить();
	
	Ожидаем.Что(Рез.Пустой()).Равно(Ложь);
	
	ТЗ = Рез.Выгрузить();
	
	Ожидаем.Что(ТЗ.Количество() = 0).Равно(Ложь);
	
	СоединениеSqlLite.Закрыть();
	СоединениеSqlLite.Открыть();
	
	Возврат ТЗ[0].rowID;
	
КонецФункции

Процедура ОбрабатыватьНовыеДанные(ОбработкаЖурнала)
	
	ПродолжатьЧтение = Истина;
	ВыводитьЛог = ОбработкаЖурнала.ПолучитьВыводитьЛог();
	Счетчик = 1;
	ПаузаСекунд = ОбработкаЖурнала.ПолучитьПаузаСекунд();
	ПаузаВремя = ПаузаСекунд * 1000;
	
	Пока ПродолжатьЧтение Цикл
		
		ЗамерОбщий = ТекущаяДата();
		ПрочитатьСобытия(ОбработкаЖурнала);
		
		Логирование.УвеличитьУровень();
		Логирование.УвеличитьУровень();
		Если ВыводитьЛог Тогда
			ВремяЗамера = ЗакончитьЗамер(ЗамерОбщий);
			ТекстСообщения = СтрШаблон("Итерация %1 - время обработки %2", Счетчик, ВремяЗамера);
			Если НЕ Логирование.ЗаписатьСтрокуЛога(ТекстСообщения) Тогда
				Сообщить("ЗаписатьСтрокуЛога: " + Логирование.ТекстОшибки);
			КонецЕсли;
			Если НЕ Логирование.ЗаписатьСтрокуЛога("") Тогда
				Сообщить("ЗаписатьСтрокуЛога: " + Логирование.ТекстОшибки);
			КонецЕсли;
			Если НЕ Логирование.ЗаписатьСтрокуЛога("---------------------------------------------------------------") Тогда
				Сообщить("ЗаписатьСтрокуЛога: " + Логирование.ТекстОшибки);
			КонецЕсли;
			Если НЕ Логирование.ЗаписатьСтрокуЛога("") Тогда
				Сообщить("ЗаписатьСтрокуЛога: " + Логирование.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		Счетчик = Счетчик + 1;
		Логирование.УменьшитьУровень();
		Логирование.УменьшитьУровень();
		
		Приостановить(ПаузаВремя);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТЗВсеЗаписиКоторыхНеХватает(ОбработкаЖурнала, IDСуществующийВSQL, ИмяТаблицы, ИмяКолонкиАйди, IDпоследнейПолучаемойЗаписиВSQLLite)
	
	СоединениеSqlLite = ОбработкаЖурнала.ПолучитьСоединениеSqlLite();
	
	ЗапросВставка = Новый Запрос();
	ЗапросВставка.УстановитьСоединение(СоединениеSqlLite);
	ТекстЗапроса = СтрШаблон("Select * From %1 Where %2 > @IDСуществующийВSQL and %2 <= @IDпоследнейПолучаемойЗаписиВSQLLite", ИмяТаблицы, ИмяКолонкиАйди);
	
	ЗапросВставка.Текст = ТекстЗапроса;
	ЗапросВставка.УстановитьПараметр("IDСуществующийВSQL", IDСуществующийВSQL);
	ЗапросВставка.УстановитьПараметр("IDпоследнейПолучаемойЗаписиВSQLLite", IDпоследнейПолучаемойЗаписиВSQLLite);
	
	Рез = ЗапросВставка.Выполнить();
	ТЗВсеЗаписиКоторыхНеХватает = Рез.Выгрузить();
	
	СоединениеSqlLite.Закрыть();
	СоединениеSqlLite.Открыть();
	
	Возврат ТЗВсеЗаписиКоторыхНеХватает;
	
КонецФункции

Функция ТекстЗапросаСозданияВSQL(ОбработкаЖурнала, ЗначенияДляЗаписи, ТаблицаСоответствия, ПроверятьНаРанееЗаписанные = Ложь)
	
	ИмяТаблицы = ТаблицаСоответствия.ИмяТаблицы;
	ИмяКолонкиАйди = ТаблицаСоответствия.ИмяКолонкиАйди;
	ИмяКолонкиАйдиВSQL = "id";
	ТекстКолонокЗаполненияТаблицыЗаписиДанных = ТекстыКолонокЗаполненияТаблицыЗаписиДанных.Получить(ИмяТаблицы);
	ИнформационнаяСистема = ОбработкаЖурнала.ПолучитьИнформационнаяСистема();
	ВсеЗначения = Новый Соответствие();
	ВсеУсловияПоиска = Новый Массив();
	
	Для Каждого ТекЗапись Из ЗначенияДляЗаписи Цикл
		
		Значения = Новый Массив();
		
		Для Каждого Счетчик Из ТекЗапись Цикл
			
			ЗначениеТекЗаписи = Счетчик.Значение;
			
			Если СтрНачинаетсяС(ЗначениеТекЗаписи, """") = Истина Тогда
				
				ЗначениеТекЗаписи = Прав(ЗначениеТекЗаписи, СтрДлина(ЗначениеТекЗаписи) - 1);
				
				Если СтрЗаканчиваетсяНа(ЗначениеТекЗаписи, """") = Истина Тогда
					ЗначениеТекЗаписи = Лев(ЗначениеТекЗаписи, СтрДлина(ЗначениеТекЗаписи) - 1);
				КонецЕсли;
				
			КонецЕсли;
			
			ЗначениеТекЗаписиВЗарос = СтрЗаменить(ЗначениеТекЗаписи, "'", """");
			ЗначениеТекЗаписиВЗарос = "'" + ЗначениеТекЗаписиВЗарос + "'";
			Значения.Добавить(ЗначениеТекЗаписиВЗарос);
			
			Если ИмяКолонкиАйди = Счетчик.Ключ Тогда
				Если ПроверятьНаРанееЗаписанные Тогда
					ЧастьУсловияПоиска = СтрШаблон("%1 = %2", ИмяКолонкиАйдиВSQL, ЗначениеТекЗаписиВЗарос);
				КонецЕсли;
				ЗначениеАйди = ЗначениеТекЗаписи;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПроверятьНаРанееЗаписанные Тогда
			ВсеУсловияПоиска.Добавить(ЧастьУсловияПоиска);
		КонецЕсли;
		
		СтрокаЗначения = "(" + СтрСоединить(Значения, ",") + ")";
		ВсеЗначения.Вставить(ЗначениеАйди, СтрокаЗначения);
		
	КонецЦикла;
	
	Если ПроверятьНаРанееЗаписанные Тогда
		СтрокаУсловияПоиска = СтрСоединить(ВсеУсловияПоиска, " OR ");
		
		СтрокаУсловияПоиска = "(" + СтрокаУсловияПоиска + ") and" + " ИнформационнаяСистема = " + ИнформационнаяСистема;
		
		СтрокаПроверки = СтрШаблон("SELECT %1 FROM %2 where %3", ИмяКолонкиАйдиВSQL, ИмяТаблицы, СтрокаУсловияПоиска);
		УбратьСуществующиеЗаписи(ОбработкаЖурнала, СтрокаПроверки, ВсеЗначения);
	КонецЕсли;
	
	Если ВсеЗначения.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВсеЗначенияМассив = Новый Массив();
	Для Каждого ТекЗначение Из ВсеЗначения Цикл
		ВсеЗначенияМассив.Добавить(ТекЗначение.Значение);
	КонецЦикла;
	
	СтрокаДляОтправки = СтрШаблон("(%1) Values %2", ТекстКолонокЗаполненияТаблицыЗаписиДанных, СтрСоединить(ВсеЗначенияМассив, ","));
	
	СтрокаЗапроса = СтрШаблон("INSERT INTO %1 %2", ИмяТаблицы, СтрокаДляОтправки);
	
	Возврат СтрокаЗапроса;
	
КонецФункции

Процедура УстановитьИнформационнуюСистему(ОбработкаЖурнала)
	
	ИмяИнформационнойБазы = ОбработкаЖурнала.ПолучитьИмяИнформационнойБазы();
	
	Соединение = ОбработкаЖурнала.ПолучитьСоединениеSql();
	
	ЗапросВставка = Новый Запрос();
	ЗапросВставка.УстановитьСоединение(Соединение);
	
	ЗапросВставка.Текст = "Select id from ИнформационныеСистемы WHERE Наименование = @Наименование";
	ЗапросВставка.УстановитьПараметр("Наименование", ИмяИнформационнойБазы);
	Рез = ЗапросВставка.Выполнить();
	
	ПервоеЧтение = Ложь;
	Если Рез.Пустой() Тогда
		Соединение.Закрыть();
		Соединение.Открыть();
		ЗапросВставка.УстановитьСоединение(Соединение);
		ЗапросВставка.Текст = "insert into ИнформационныеСистемы (Наименование, Описание, Представление) values(@Наименование, @Описание, @Представление)";
		ЗапросВставка.УстановитьПараметр("Описание", ОбработкаЖурнала.ПолучитьОписаниеИнформационнойБазы());
		ЗапросВставка.УстановитьПараметр("Представление", ОбработкаЖурнала.ПолучитьПредставлениеИнформационнойБазы());
		Рез = ЗапросВставка.ВыполнитьКоманду();
		Ожидаем.Что(Рез).Равно(1);
		
		Соединение.Закрыть();
		Соединение.Открыть();
		ЗапросВставка.УстановитьСоединение(Соединение);
		ЗапросВставка.Текст = "Select id from ИнформационныеСистемы WHERE Наименование = @Наименование";
		Рез = ЗапросВставка.Выполнить();
		ПервоеЧтение = Истина;
		
	КонецЕсли;
	
	Ожидаем.Что(Рез.Пустой()).Равно(Ложь);
	ТЗ = Рез.Выгрузить();
	ОбработкаЖурнала.УстановитьИнформационнаяСистема(ТЗ[0].id);
	
	Соединение.Закрыть();
	Соединение.Открыть();
	
	Если ПервоеЧтение Тогда
		ЗаполнитьМаксималныеIDТаблиц(ОбработкаЖурнала);
		ЗаполнитьСостоянияТранзакции(ОбработкаЖурнала);
		ЗаполнитьУровниСобытий(ОбработкаЖурнала);
	КонецЕсли;
	
КонецПроцедуры

Процедура УбратьСуществующиеЗаписи(ОбработкаЖурнала, СтрокаПроверки, ВсеЗначения)
	
	Соединение = ОбработкаЖурнала.ПолучитьСоединениеSql();
	ЗапросВставка = Новый Запрос();
	ЗапросВставка.УстановитьСоединение(Соединение);
	ЗапросВставка.Текст = СтрокаПроверки;
	РезультатОбработки = ЗапросВставка.Выполнить();
	
	Если РезультатОбработки.Пустой() Тогда
		Соединение.Закрыть();
		Соединение.Открыть();
		Возврат;
	КонецЕсли;
	
	ТЗ = РезультатОбработки.Выгрузить();
	
	Счетчик = ТЗ.Количество() - 1;
	
	Пока Счетчик >= 0 Цикл
		
		ТекСтрока = ТЗ.Получить(Счетчик);
		
		Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
			ПолеПоиска = ТекСтрока[ТекКолонка.Имя];
		КонецЦикла;
		
		ВсеЗначения.Удалить(ПолеПоиска);
		
		Счетчик = Счетчик - 1;
		
	КонецЦикла;
	
	Соединение.Закрыть();
	Соединение.Открыть();
	
КонецПроцедуры

Функция ПерекодироватьСтроку(СтрокаКодирования)
	
	Стрим = Новый COMОбъект("Adodb.Stream");
	Стрим.Type = 2;
	Стрим.Mode = 3;
	Стрим.charset = "windows-1251";
	Стрим.Open();
	Стрим.WriteText(СтрокаКодирования);
	Стрим.Position = 0;
	Стрим.charset = "utf-8";
	Рез = Стрим.ReadText(-1);
	
	Возврат Рез;
	
КонецФункции

Процедура УстановитьТекстыКолонокЗаполненияТаблицыЗаписиДанных()
	
	ТекстыКолонокЗаполненияТаблицыЗаписиДанных = Новый Соответствие();
	
	СоответствиеТаблиц = СоответствиеТаблиц();
	
	Для Каждого ТекСоответствие Из СоответствиеТаблиц Цикл
		
		ТекСоответствиеЗначение = ТекСоответствие.Значение;
		
		Ключи = Новый Массив();
		
		Ключи.Добавить("ИнформационнаяСистема");
		
		Для Каждого СоответствиеКолонок Из ТекСоответствиеЗначение.СоответствиеКолонок Цикл
			
			Ключи.Добавить(СоответствиеКолонок.Значение);
			
		КонецЦикла;
		
		ТекстКолонокЗаполненияТаблицыЗаписиДанных = СтрСоединить(Ключи, ",");
		ТекстыКолонокЗаполненияТаблицыЗаписиДанных.Вставить(ТекСоответствиеЗначение.ИмяТаблицы, ТекстКолонокЗаполненияТаблицыЗаписиДанных);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДатаФорматаSQL(ДатаSQLLite)

	ТриЧасаСмещение = 10800; // 1с журнал пишет со смещением относительно клиента к серверу, на моей базе 3 часа 

	Если ЗначениеЗаполнено(ДатаSQLLite) Тогда
		Дата1с = '00010101000000' + ДатаSQLLite / 10000 + ТриЧасаСмещение;
		ДатаФорматаSQL = Формат(Дата1с, "ДФ=dd.ММ.yyyy") + " " + Формат(Дата1с, "ДФ=H:mm:ss");
	Иначе
		ДатаФорматаSQL = '19000101';
	КонецЕсли;
	
	Возврат ДатаФорматаSQL;
	
КонецФункции

Процедура ПодключитьсяКSQLLite(ОбработкаЖурнала)
	
	ПодключитьВнешнююКомпоненту(ОбработкаЖурнала.ПолучитьПутьКВнешнейКомпонентеSqlLite());
	
	Соединение = Новый Соединение();
	Соединение.ТипСУБД = Соединение.ТипыСУБД.sqlite;
	Соединение.ИмяБазы = ОбработкаЖурнала.ПолучитьПутьКSqlLite();
	Соединение.Открыть();
	Ожидаем.Что(Соединение.Открыто).ЭтоИстина();
	ОбработкаЖурнала.УстановитьСоединениеSqlLite(Соединение);
	
КонецПроцедуры

Процедура ПодключитьсяКMsSql(ОбработкаЖурнала)
	
	Соединение = Новый Соединение();
	Соединение.ТипСУБД = Соединение.ТипыСУБД.MSSQLServer;
	Соединение.СтрокаСоединения = ОбработкаЖурнала.ПолучитьСтрокаСоединенияСSQL();
	Соединение.Открыть();
	Ожидаем.Что(Соединение.Открыто).ЭтоИстина();
	ОбработкаЖурнала.УстановитьСоединениеSql(Соединение);
	
КонецПроцедуры

Функция ТаблицуЗначенийВМассив(тзДанных, ОбработкаЖурнала)
	
	ИнформационнаяСистема = ОбработкаЖурнала.ПолучитьИнформационнаяСистема();
	
	мсДанных = Новый Массив;
	
	Для Каждого СтрокаТЗ Из тзДанных Цикл
		
		стСтрокаТаблицы = Новый Структура;
		
		стСтрокаТаблицы.Вставить("ИнформационнаяСистема", ИнформационнаяСистема);
		
		Для Каждого ИмяКолонки Из тзДанных.Колонки Цикл
			
			стСтрокаТаблицы.Вставить(ИмяКолонки.Имя, СтрокаТЗ[ИмяКолонки.Имя]);
			
		КонецЦикла;
		
		мсДанных.Добавить(стСтрокаТаблицы);
		
	КонецЦикла;
	
	Возврат мсДанных;
	
КонецФункции

Процедура ДобавитьЗаписиВSQL(ТекстЗапросаСозданияВSQL, ОбработкаЖурнала)
	
	СоединениеSql = ОбработкаЖурнала.ПолучитьСоединениеSql();
	
	ЗапросВставка = Новый Запрос();
	ЗапросВставка.УстановитьСоединение(СоединениеSql);
	ЗапросВставка.Текст = ТекстЗапросаСозданияВSQL;
	Рез = ЗапросВставка.Выполнить();
	СоединениеSql.Закрыть();
	СоединениеSql.Открыть();
	
КонецПроцедуры

Функция СоответствиеТаблиц()
	
	СоответствиеТаблиц = Новый Соответствие();
	
	// ДополнительныеПорты
	
	ДанныеТаблицыСоответствия = Новый Структура();
	ДанныеТаблицыСоответствия.Вставить("ИмяТаблицы", "ДополнительныеПорты");
	СтандартнаяСтруктураТаблицы = СтандартнаяСтруктураТаблицы();
	ДанныеТаблицыСоответствия.Вставить("СоответствиеКолонок", СтандартнаяСтруктураТаблицы);
	ДанныеТаблицыСоответствия.Вставить("ИмяКолонкиАйди", "code");
	СоответствиеТаблиц.Вставить("SecondaryPortCodes", ДанныеТаблицыСоответствия);
	
	// Компьютеры
	
	ДанныеТаблицыСоответствия = Новый Структура();
	ДанныеТаблицыСоответствия.Вставить("ИмяТаблицы", "Компьютеры");
	СтандартнаяСтруктураТаблицы = СтандартнаяСтруктураТаблицы();
	ДанныеТаблицыСоответствия.Вставить("СоответствиеКолонок", СтандартнаяСтруктураТаблицы);
	ДанныеТаблицыСоответствия.Вставить("ИмяКолонкиАйди", "code");
	СоответствиеТаблиц.Вставить("ComputerCodes", ДанныеТаблицыСоответствия);
	
	// Метаданные
	
	ДанныеТаблицыСоответствия = Новый Структура();
	ДанныеТаблицыСоответствия.Вставить("ИмяТаблицы", "Метаданные");
	СтандартнаяСтруктураТаблицыСUUID = СтандартнаяСтруктураТаблицыСUUID();
	ДанныеТаблицыСоответствия.Вставить("СоответствиеКолонок", СтандартнаяСтруктураТаблицыСUUID);
	ДанныеТаблицыСоответствия.Вставить("ИмяКолонкиАйди", "code");
	СоответствиеТаблиц.Вставить("MetadataCodes", ДанныеТаблицыСоответствия);
	
	// ПервичныеПорты
	
	ДанныеТаблицыСоответствия = Новый Структура();
	ДанныеТаблицыСоответствия.Вставить("ИмяТаблицы", "ПервичныеПорты");
	СтандартнаяСтруктураТаблицы = СтандартнаяСтруктураТаблицы();
	ДанныеТаблицыСоответствия.Вставить("СоответствиеКолонок", СтандартнаяСтруктураТаблицы);
	ДанныеТаблицыСоответствия.Вставить("ИмяКолонкиАйди", "code");
	СоответствиеТаблиц.Вставить("PrimaryPortCodes", ДанныеТаблицыСоответствия);
	
	// Пользователи
	
	ДанныеТаблицыСоответствия = Новый Структура();
	ДанныеТаблицыСоответствия.Вставить("ИмяТаблицы", "Пользователи");
	СтандартнаяСтруктураТаблицыСUUID = СтандартнаяСтруктураТаблицыСUUID();
	ДанныеТаблицыСоответствия.Вставить("СоответствиеКолонок", СтандартнаяСтруктураТаблицыСUUID);
	ДанныеТаблицыСоответствия.Вставить("ИмяКолонкиАйди", "code");
	СоответствиеТаблиц.Вставить("UserCodes", ДанныеТаблицыСоответствия);
	
	// Приложения
	
	ДанныеТаблицыСоответствия = Новый Структура();
	ДанныеТаблицыСоответствия.Вставить("ИмяТаблицы", "Приложения");
	СтандартнаяСтруктураТаблицыПредставление = СтандартнаяСтруктураТаблицыПредставление();
	ДанныеТаблицыСоответствия.Вставить("СоответствиеКолонок", СтандартнаяСтруктураТаблицыПредставление);
	ДанныеТаблицыСоответствия.Вставить("ИмяКолонкиАйди", "code");
	СоответствиеТаблиц.Вставить("AppCodes", ДанныеТаблицыСоответствия);
	
	// РабочиеСервера
	
	ДанныеТаблицыСоответствия = Новый Структура();
	ДанныеТаблицыСоответствия.Вставить("ИмяТаблицы", "РабочиеСервера");
	СтандартнаяСтруктураТаблицы = СтандартнаяСтруктураТаблицы();
	ДанныеТаблицыСоответствия.Вставить("СоответствиеКолонок", СтандартнаяСтруктураТаблицы);
	ДанныеТаблицыСоответствия.Вставить("ИмяКолонкиАйди", "code");
	СоответствиеТаблиц.Вставить("WorkServerCodes", ДанныеТаблицыСоответствия);
	
	// События
	
	ДанныеТаблицыСоответствия = Новый Структура();
	ДанныеТаблицыСоответствия.Вставить("ИмяТаблицы", "События");
	СтандартнаяСтруктураТаблицыПредставление = СтандартнаяСтруктураТаблицыПредставление();
	ДанныеТаблицыСоответствия.Вставить("СоответствиеКолонок", СтандартнаяСтруктураТаблицыПредставление);
	ДанныеТаблицыСоответствия.Вставить("ИмяКолонкиАйди", "code");
	СоответствиеТаблиц.Вставить("EventCodes", ДанныеТаблицыСоответствия);
	
	// Записи данных
	
	ДанныеТаблицыСоответствия = Новый Структура();
	ДанныеТаблицыСоответствия.Вставить("ИмяТаблицы", "ЗаписиДанных");
	СтруктураТаблицыЗаписиДанных = СтруктураТаблицыЗаписиДанных();
	ДанныеТаблицыСоответствия.Вставить("СоответствиеКолонок", СтруктураТаблицыЗаписиДанных);
	ДанныеТаблицыСоответствия.Вставить("ИмяКолонкиАйди", "rowID");
	СоответствиеТаблиц.Вставить("EventLog", ДанныеТаблицыСоответствия);
	
	Возврат СоответствиеТаблиц;
	
КонецФункции

Функция СтандартнаяСтруктураТаблицы()
	
	СтруктураТаблицы = Новый Структура();
	СтруктураТаблицы.Вставить("code", "Id");
	СтруктураТаблицы.Вставить("name", "Наименование");
	
	Возврат СтруктураТаблицы;
	
КонецФункции

Функция СтандартнаяСтруктураТаблицыПредставление()
	
	СтруктураТаблицы = Новый Структура();
	СтруктураТаблицы.Вставить("code", "Id");
	СтруктураТаблицы.Вставить("name", "Наименование");
	СтруктураТаблицы.Вставить("Представление", "Представление");
	
	Возврат СтруктураТаблицы;
	
КонецФункции

Функция СтруктураТаблицыЗаписиДанных()
	
	СтруктураТаблицы = Новый Структура();
	СтруктураТаблицы.Вставить("rowID", "ID");
	СтруктураТаблицы.Вставить("severity", "УровеньСобытия");
	СтруктураТаблицы.Вставить("date", "Период");
	СтруктураТаблицы.Вставить("connectID", "Соединение");
	СтруктураТаблицы.Вставить("session", "Сеанс");
	СтруктураТаблицы.Вставить("transactionStatus", "СостояниеТранзакции");
	СтруктураТаблицы.Вставить("transactionDate", "ПериодТранзакции");
	СтруктураТаблицы.Вставить("transactionID", "ИдентификаторТранзакции");
	СтруктураТаблицы.Вставить("userCode", "Пользователь");
	СтруктураТаблицы.Вставить("computerCode", "Компьютер");
	СтруктураТаблицы.Вставить("appCode", "Приложение");
	СтруктураТаблицы.Вставить("eventCode", "Событие");
	СтруктураТаблицы.Вставить("comment", "Комментарий");
	СтруктураТаблицы.Вставить("metadataCodes", "Метаданные");
	СтруктураТаблицы.Вставить("dataPresentation", "ПредставлениеДанных");
	СтруктураТаблицы.Вставить("workServerCode", "РабочийСервер");
	СтруктураТаблицы.Вставить("primaryPortCode", "ПервичныйПорт");
	СтруктураТаблицы.Вставить("secondaryPortCode", "ДополнительныйПорт");
	СтруктураТаблицы.Вставить("Данные", "Данные");
	СтруктураТаблицы.Вставить("ИдентификаторДанных", "ИдентификаторДанных");
	
	Возврат СтруктураТаблицы;
	
КонецФункции

Функция СтандартнаяСтруктураТаблицыСUUID()
	
	СтруктураТаблицы = Новый Структура();
	СтруктураТаблицы.Вставить("code", "Id");
	СтруктураТаблицы.Вставить("name", "Наименование");
	СтруктураТаблицы.Вставить("uuid", "Uuid");
	
	Возврат СтруктураТаблицы;
	
КонецФункции

Процедура ЗаполнитьМаксималныеIDТаблиц(ОбработкаЖурнала)
	
	Соединение = ОбработкаЖурнала.ПолучитьСоединениеSql();
	ЗапросВставка = Новый Запрос();
	ЗапросВставка.УстановитьСоединение(Соединение);
	ИнформационнаяСистема = ОбработкаЖурнала.ПолучитьИнформационнаяСистема();
	ЗапросВставка.Текст = "insert into МаксималныеIDТаблиц (ИнформационнаяСистема, Наименование, Id) values(@ИнформационнаяСистема, 'Компьютеры', 0), (@ИнформационнаяСистема, 'Приложения', 0), (@ИнформационнаяСистема, 'События', 0), (@ИнформационнаяСистема, 'РабочиеСервера', 0), (@ИнформационнаяСистема, 'ПервичныеПорты', 0), (@ИнформационнаяСистема, 'ЗаписиДанных', 0), (@ИнформационнаяСистема, 'Пользователи', 0), (@ИнформационнаяСистема, 'Метаданные', 0), (@ИнформационнаяСистема, 'ДополнительныеПорты', 0)";
	ЗапросВставка.УстановитьПараметр("ИнформационнаяСистема", ИнформационнаяСистема);
	Рез = ЗапросВставка.ВыполнитьКоманду();
	Ожидаем.Что(Рез).Равно(9);
	Соединение.Закрыть();
	Соединение.Открыть();
	
КонецПроцедуры

Процедура ЗаполнитьСостоянияТранзакции(ОбработкаЖурнала)
	
	Соединение = ОбработкаЖурнала.ПолучитьСоединениеSql();
	ЗапросВставка = Новый Запрос();
	ЗапросВставка.УстановитьСоединение(Соединение);
	ИнформационнаяСистема = ОбработкаЖурнала.ПолучитьИнформационнаяСистема();
	ЗапросВставка.Текст = "insert into СостоянияТранзакции (ИнформационнаяСистема, Id, Представление, Имя) values(@ИнформационнаяСистема, 1, 'Зафиксирована', 'Committed'), (@ИнформационнаяСистема, 2, 'Отменена', 'RolledBack'), (@ИнформационнаяСистема, 3, 'Нет транзакции', 'NotApplicable'), (@ИнформационнаяСистема, 0, 'Не завершена', 'Unfinished')";
	
	ЗапросВставка.УстановитьПараметр("ИнформационнаяСистема", ИнформационнаяСистема);
	Рез = ЗапросВставка.ВыполнитьКоманду();
	Ожидаем.Что(Рез).Равно(4);
	Соединение.Закрыть();
	Соединение.Открыть();
	
КонецПроцедуры

Процедура ЗаполнитьУровниСобытий(ОбработкаЖурнала)
	
	Соединение = ОбработкаЖурнала.ПолучитьСоединениеSql();
	ЗапросВставка = Новый Запрос();
	ЗапросВставка.УстановитьСоединение(Соединение);
	ИнформационнаяСистема = ОбработкаЖурнала.ПолучитьИнформационнаяСистема();
	ЗапросВставка.Текст = "insert into УровниСобытий (ИнформационнаяСистема, Id, Представление, Имя) values (@ИнформационнаяСистема, 0, 'Примечание', 'Note'), (@ИнформационнаяСистема, 1, 'Информация', 'Information'), (@ИнформационнаяСистема, 2, 'Предупреждение', 'Warning'), (@ИнформационнаяСистема, 3, 'Ошибка', 'Error')";
	ЗапросВставка.УстановитьПараметр("ИнформационнаяСистема", ИнформационнаяСистема);
	Рез = ЗапросВставка.ВыполнитьКоманду();
	Ожидаем.Что(Рез).Равно(4);
	Соединение.Закрыть();
	Соединение.Открыть();
	
КонецПроцедуры

Функция ПредставленияСобытия()
	
	ПредставленияСобытия = Новый Соответствие();
	
	ПредставленияСобытия.Вставить("_$Access$_.Access", "Доступ_Доступ");
	ПредставленияСобытия.Вставить("_$Access$_.AccessDenied", "Доступ_Отказ в доступе");
	ПредставленияСобытия.Вставить("_$Data$_.Delete", "Данные_Удаление");
	ПредставленияСобытия.Вставить("_$Data$_.DeletePredefinedData", "Данные_Удаление предопределенных данных");
	ПредставленияСобытия.Вставить("_$Data$_.DeleteVersions", "Данные_Данные. Удаление версий");
	ПредставленияСобытия.Вставить("_$Data$_.New", "Данные_Добавление");
	ПредставленияСобытия.Вставить("_$Data$_.NewPredefinedData", "Данные_Добавление предопределенных данных");
	ПредставленияСобытия.Вставить("_$Data$_.NewVersion", "Данные_Добавление версии");
	ПредставленияСобытия.Вставить("_$Data$_.Post", "Данные_Проведение");
	ПредставленияСобытия.Вставить("_$Data$_.PredefinedDataInitialization", "Данные_Инициализация предопределенных данных");
	ПредставленияСобытия.Вставить("_$Data$_.PredefinedDataInitializationDataNotFound", "Данные_Инициализация предопределенных данных. Данные не найдены");
	ПредставленияСобытия.Вставить("_$Data$_.SetPredefinedDataInitialization", "Данные_Установка инициализации предопределенных данных");
	ПредставленияСобытия.Вставить("_$Data$_.SetStandardODataInterfaceContent", "Данные_Изменение состава стандартного интерфейса OData");
	ПредставленияСобытия.Вставить("_$Data$_.TotalsMaxPeriodUpdate", "Данные_Изменение максимального периода рассчитанных итогов");
	ПредставленияСобытия.Вставить("_$Data$_.TotalsMinPeriodUpdate", "Данные_Изменение минимального периода рассчитанных итогов");
	ПредставленияСобытия.Вставить("_$Data$_.Unpost", "Данные_Отмена проведения");
	ПредставленияСобытия.Вставить("_$Data$_.Update", "Данные_Изменение");
	ПредставленияСобытия.Вставить("_$Data$_.UpdatePredefinedData", "Данные_Изменение предопределенных данных");
	ПредставленияСобытия.Вставить("_$Data$_.VersionCommentUpdate", "Данные_Изменение комментария версии");
	ПредставленияСобытия.Вставить("_$InfoBase$_.ConfigExtensionUpdate", "Информационная база_Изменение расширения конфигурации");
	ПредставленияСобытия.Вставить("_$InfoBase$_.ConfigUpdate", "Информационная база_Изменение конфигурации");
	ПредставленияСобытия.Вставить("_$InfoBase$_.DBConfigBackgroundUpdateCancel", "Информационная база_Отмена фонового обновления");
	ПредставленияСобытия.Вставить("_$InfoBase$_.DBConfigBackgroundUpdateFinish", "Информационная база_Завершение фонового обновления");
	ПредставленияСобытия.Вставить("_$InfoBase$_.DBConfigBackgroundUpdateResume", "Информационная база_Продолжение (после приостановки) процесса фонового обновления");
	ПредставленияСобытия.Вставить("_$InfoBase$_.DBConfigBackgroundUpdateStart", "Информационная база_Запуск фонового обновления");
	ПредставленияСобытия.Вставить("_$InfoBase$_.DBConfigBackgroundUpdateSuspend", "Информационная база_Приостановка (пауза) процесса фонового обновления");
	ПредставленияСобытия.Вставить("_$InfoBase$_.DBConfigExtensionUpdate", "Информационная база_Изменение расширения конфигурации");
	ПредставленияСобытия.Вставить("_$InfoBase$_.DBConfigExtensionUpdateError", "Информационная база_Ошибка изменения расширения конфигурации");
	ПредставленияСобытия.Вставить("_$InfoBase$_.DBConfigUpdate", "Информационная база_Изменение конфигурации базы данных");
	ПредставленияСобытия.Вставить("_$InfoBase$_.DBConfigUpdateStart", "Информационная база_Запуск обновления конфигурации базы данных");
	ПредставленияСобытия.Вставить("_$InfoBase$_.DBConfigUpdateError", "Информационная база_Ошибка обновления конфигурации базы данных");
	ПредставленияСобытия.Вставить("_$InfoBase$_.DumpError", "Информационная база_Ошибка выгрузки в файл");
	ПредставленияСобытия.Вставить("_$InfoBase$_.DumpFinish", "Информационная база_Окончание выгрузки в файл");
	ПредставленияСобытия.Вставить("_$InfoBase$_.DumpStart", "Информационная база_Начало выгрузки в файл");
	ПредставленияСобытия.Вставить("_$InfoBase$_.EraseData", "Информационная база_Удаление данных информационной баз");
	ПредставленияСобытия.Вставить("_$InfoBase$_.EventLogReduce", "Информационная база_Сокращение журнала регистрации");
	ПредставленияСобытия.Вставить("_$InfoBase$_.EventLogReduceError", "Информационная база_Ошибка сокращения журнала регистрации");
	ПредставленияСобытия.Вставить("_$InfoBase$_.EventLogSettingsUpdate", "Информационная база_Изменение параметров журнала регистрации");
	ПредставленияСобытия.Вставить("_$InfoBase$_.EventLogSettingsUpdateError", "Информационная база_Изменение настроек журнала регистрации");
	ПредставленияСобытия.Вставить("_$InfoBase$_.InfoBaseAdmParamsUpdate", "Информационная база_Изменение параметров информационной базы");
	ПредставленияСобытия.Вставить("_$InfoBase$_.InfoBaseAdmParamsUpdateError", "Информационная база_Ошибка изменения параметров информационной базы");
	ПредставленияСобытия.Вставить("_$InfoBase$_.MasterNodeUpdate", "Информационная база_Изменение главного узла");
	ПредставленияСобытия.Вставить("_$InfoBase$_.PredefinedDataUpdate", "Информационная база_Обновление предопределенных данных");
	ПредставленияСобытия.Вставить("_$InfoBase$_.RegionalSettingsUpdate", "Информационная база_Изменение региональных установок");
	ПредставленияСобытия.Вставить("_$InfoBase$_.RestoreError", "Информационная база_Ошибка загрузки из файла");
	ПредставленияСобытия.Вставить("_$InfoBase$_.RestoreFinish", "Информационная база_Окончание загрузки из файла");
	ПредставленияСобытия.Вставить("_$InfoBase$_.RestoreStart", "Информационная база_Начало загрузки из файла");
	ПредставленияСобытия.Вставить("_$InfoBase$_.SetPredefinedDataUpdate", "Информационная база_Установить обновление предопределенных данных");
	ПредставленияСобытия.Вставить("_$InfoBase$_.TARImportant", "Информационная база_Тестирование и исправление. Ошибка");
	ПредставленияСобытия.Вставить("_$InfoBase$_.TARInfo", "Информационная база_Тестирование и исправление. Сообщение");
	ПредставленияСобытия.Вставить("_$InfoBase$_.TARMess", "Информационная база_Тестирование и исправление. Предупреждение");
	ПредставленияСобытия.Вставить("_$InfoBase$_.SecondFactorAuthTemplateNew", "Информационная база_Добавление шаблона вторго фактора аутентификации");
	ПредставленияСобытия.Вставить("_$InfoBase$_.SecondFactorAuthTemplateUpdate", "Информационная база_Изменение шаблона вторго фактора аутентификации");
	ПредставленияСобытия.Вставить("_$InfoBase$_.SecondFactorAuthTemplateDelete", "Информационная база_Удаление шаблона вторго фактора аутентификации");
	ПредставленияСобытия.Вставить("_$Job$_.Cancel", "Фоновое задание_Отмена");
	ПредставленияСобытия.Вставить("_$Job$_.Fail", "Фоновое задание_Ошибка выполнения");
	ПредставленияСобытия.Вставить("_$Job$_.Start", "Фоновое задание_Запуск");
	ПредставленияСобытия.Вставить("_$Job$_.Succeed", "Фоновое задание_Успешное завершение");
	ПредставленияСобытия.Вставить("_$Job$_.Terminate", "Фоновое задание_Принудительное завершение");
	ПредставленияСобытия.Вставить("_$Job$_.Finish", "Фоновое задание_Завершение");
	ПредставленияСобытия.Вставить("_$Job$_.Error", "Фоновое задание_Ошибка выполнения");
	ПредставленияСобытия.Вставить("_$OpenIDProvider$_.NegativeAssertion", "Провайдер OpenID_Отклонено");
	ПредставленияСобытия.Вставить("_$OpenIDProvider$_.PositiveAssertion", "Провайдер OpenID_Подтверждено");
	ПредставленияСобытия.Вставить("_$PerformError$_", "Ошибка выполнения_");
	ПредставленияСобытия.Вставить("_$Session$_.Authentication", "Сеанс_Аутентификация");
	ПредставленияСобытия.Вставить("_$Session$_.AuthenticationError", "Сеанс_Ошибка аутентификации");
	ПредставленияСобытия.Вставить("_$Session$_.AuthenticationFirstFactor", "Сеанс_Аутентификация первый фактор");
	ПредставленияСобытия.Вставить("_$Session$_.ConfigExtensionApplyError", "Сеанс_Ошибка применения расширения конфигурации");
	ПредставленияСобытия.Вставить("_$Session$_.Finish", "Сеанс_Завершение");
	ПредставленияСобытия.Вставить("_$Session$_.Start", "Сеанс_Начало");
	ПредставленияСобытия.Вставить("_$Transaction$_.Begin", "Транзакция_Начало");
	ПредставленияСобытия.Вставить("_$Transaction$_.Commit", "Транзакция_Фиксация");
	ПредставленияСобытия.Вставить("_$Transaction$_.Rollback", "Транзакция_Отмена");
	ПредставленияСобытия.Вставить("_$User$_.Delete", "Пользователи_Удаление");
	ПредставленияСобытия.Вставить("_$User$_.DeleteError", "Пользователи_Ошибка удаления");
	ПредставленияСобытия.Вставить("_$User$_.New", "Пользователи_Добавление");
	ПредставленияСобытия.Вставить("_$User$_.NewError", "Пользователи_Ошибка добавления");
	ПредставленияСобытия.Вставить("_$User$_.Update", "Пользователи_Изменение");
	ПредставленияСобытия.Вставить("_$User$_.UpdateError", "Пользователи_Ошибка изменения");
	ПредставленияСобытия.Вставить("_$User$_.AuthenticationLock", "Пользователи_Ошибка аутентификации");
	
	Возврат ПредставленияСобытия;
	
КонецФункции

Функция ПредставленияПриложения()
	
	ПредставленияПриложения = Новый Соответствие();
	ПредставленияПриложения.Вставить("1CV8", "1С:Предприятие в режиме толстого клиента");
	ПредставленияПриложения.Вставить("1CV8C", "1С:Предприятие в режиме тонкого клиента");
	ПредставленияПриложения.Вставить("WebClient", "1С:Предприятие в режиме веб-клиента");
	ПредставленияПриложения.Вставить("Designer", "Конфигуратор");
	ПредставленияПриложения.Вставить("COMConnection", "1С:Предприятия через COM");
	ПредставленияПриложения.Вставить("WSConnection", "Web-сервис");
	ПредставленияПриложения.Вставить("BackgroundJob", "Обработка заданий");
	ПредставленияПриложения.Вставить("SystemBackgroundJob", "Системное фоновое задание");
	ПредставленияПриложения.Вставить("SrvrConsole", "Консоль кластера");
	ПредставленияПриложения.Вставить("COMConsole", "Административная сессиия внешнего соединения");
	ПредставленияПриложения.Вставить("JobScheduler", "Планировщик заданий");
	ПредставленияПриложения.Вставить("Debugger", "Отладчик");
	ПредставленияПриложения.Вставить("RAS", "Сервер администрирования");
	
	Возврат ПредставленияПриложения;
	
КонецФункции

Процедура ПодготовитьВыводЛога(ОбработкаЖурнала)
	
	ПапкаЛога = Новый Файл(ПутьПапкаЛога);
	Если НЕ ПапкаЛога.Существует() Тогда
		СоздатьКаталог(ПутьПапкаЛога);
	КонецЕсли;
	
	Если Логирование.СоздатьФайлЛога(ОбработкаЖурнала.ПолучитьИмяИнформационнойБазы(), ПутьПапкаЛога) Тогда
		ИмяФайлаЛога = Логирование.ИмяФайлаЛога;
	Иначе
		ТекстОшибки = "СоздатьФайлЛога: " + Логирование.ТекстОшибки;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

СоответствиеТаблиц = СоответствиеТаблиц();
ПредставленияПриложения = ПредставленияПриложения();
ПредставленияСобытия = ПредставленияСобытия();
Логирование = Новый ТУправлениеЛогированием();
Логирование.ДатаВремяВКаждойСтроке = Истина;
ПутьПапкаЛога = "Log";